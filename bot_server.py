#!/usr/bin/env python3
"""
Wroc≈Çaw "Bez Kolejki" auto-booking bot (Playwright, Python).
–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏, –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ /start.
"""
from __future__ import annotations
import asyncio
import re
from dataclasses import dataclass
from typing import Optional
import os
import subprocess
import requests
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from playwright.async_api import async_playwright, Page, Browser, BrowserContext

# -------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–µ–∑ ENV --------
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "")
CHAT_ID = os.getenv("CHAT_ID", "")
USER_EMAIL = os.getenv("USER_EMAIL", "")
USER_PESEL = os.getenv("USER_PESEL", "")
OFFICE_TEXT = os.getenv("OFFICE_TEXT", "USC przy ul. W≈Çodkowica 20")
SERVICE_TEXT = os.getenv("SERVICE_TEXT", "UT: Wpis zagranicznego urodzenia/ma≈Ç≈ºe≈Ñstwa/zgonu")
CHECK_INTERVAL_SEC = int(os.getenv("CHECK_INTERVAL_SEC", 60))
HEADLESS = os.getenv("HEADLESS", "true").lower() == "true"
BOOK_ASAP = True

# ===== –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ =====
@dataclass
class FoundSlot:
    date_str: str
    time_str: str

state = {
    "running": False,
    "bg_task": None,
    "browser_context": None
}

USER_DATA = {"PESEL": USER_PESEL, "Email": USER_EMAIL}

# -------- Telegram ---------
def send_telegram(text: str):
    print(text)
    if TELEGRAM_TOKEN and CHAT_ID:
        try:
            requests.post(
                f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage",
                data={"chat_id": CHAT_ID, "text": text},
                timeout=10,
            )
        except Exception as e:
            print("‚ùå Telegram error:", e)

# -------- Playwright —É—Å—Ç–∞–Ω–æ–≤–∫–∞ ---------
def ensure_playwright_browsers():
    """–°–∫–∞—á–∏–≤–∞–µ–º Chromium –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ Railway."""
    try:
        subprocess.run(["playwright", "install", "chromium"], check=True)
        send_telegram("‚úÖ Chromium —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")
    except Exception as e:
        send_telegram(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Chromium: {e}")

# -------- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–π—Ç–∞ ---------
async def goto_home(page: Page):
    send_telegram("üåê –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
    await page.goto("https://bez-kolejki.um.wroc.pl", timeout=25_000)
    for txt in ["AKCEPTUJƒò", "akceptuj", "Akceptuj"]:
        try:
            btn = page.locator(f"div:has-text('{txt}')").first
            await btn.click(timeout=5000)
            send_telegram(f"‚úÖ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '{txt}'")
        except Exception:
            pass

async def click_dalej(page: Page) -> bool:
    try:
        await page.locator("button:has-text('DALEJ'):not([disabled])").first.click(timeout=30_000)
        send_telegram("‚û°Ô∏è –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ DALEJ")
        return True
    except Exception:
        return False

async def select_office_and_service(page: Page):
    send_telegram(f"üè¢ –í—ã–±–∏—Ä–∞–µ–º –æ—Ñ–∏—Å: {OFFICE_TEXT}")
    await page.get_by_text(OFFICE_TEXT, exact=False).first.click(timeout=30_000)
    await click_dalej(page)
    send_telegram(f"üõé –í—ã–±–∏—Ä–∞–µ–º —É—Å–ª—É–≥—É: {SERVICE_TEXT}")
    await page.get_by_text(SERVICE_TEXT, exact=False).first.click(timeout=30_000)
    await click_dalej(page)

async def choose_first_available_date(page: Page) -> Optional[str]:
    day_btns = page.get_by_role("button").filter(
        has_text=re.compile(r"^\s*(?:[1-9]|[12]\d|3[01])\s*$")
    )
    for _ in range(25):
        count = await day_btns.count()
        for i in range(count):
            el = day_btns.nth(i)
            disabled = await el.evaluate(
                "(el) => el.hasAttribute('disabled') || el.getAttribute('aria-disabled') === 'true'"
            )
            if not disabled:
                txt = (await el.inner_text()).strip()
                await el.click()
                send_telegram(f"üìÖ –í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {txt}")
                return txt
        await asyncio.sleep(0.2)
    return None

async def choose_first_available_time(page: Page) -> Optional[str]:
    time_btns = page.get_by_role("button").filter(
        has_text=re.compile(r"\b\d{1,2}:\d{2}\b")
    )
    await time_btns.first.wait_for(state="visible", timeout=10_000)
    for i in range(await time_btns.count()):
        el = time_btns.nth(i)
        disabled = await el.evaluate(
            "(el) => el.hasAttribute('disabled') || el.getAttribute('aria-disabled') === 'true'"
        )
        if not disabled:
            t = (await el.inner_text()).strip()
            await el.click()
            send_telegram(f"‚è∞ –í—ã–±—Ä–∞–Ω–æ –≤—Ä–µ–º—è: {t}")
            return t
    return None

async def fill_email_and_pesel(page):
    try:
        await page.get_by_label("E-mail *").fill(USER_DATA["Email"])
        await page.get_by_label("5 ostatnich znak√≥w PESEL lub numeru paszportu *").fill(USER_DATA["PESEL"])
        send_telegram("‚úÖ Email –∏ PESEL –∑–∞–ø–æ–ª–Ω–µ–Ω—ã")
    except Exception as e:
        send_telegram(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è Email/PESEL: {e}")

async def run_once(context: BrowserContext) -> Optional[FoundSlot]:
    page = await context.new_page()
    try:
        await goto_home(page)
        await select_office_and_service(page)

        date_str = await choose_first_available_date(page)
        if not date_str:
            send_telegram("‚ö†Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç –Ω–µ—Ç.")
            await page.close()
            return None

        time_str = await choose_first_available_time(page)
        if not time_str:
            send_telegram("‚ö†Ô∏è –î–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ—Ç.")
            await page.close()
            return None

        await fill_email_and_pesel(page)
        slot = FoundSlot(date_str=date_str, time_str=time_str)
        return slot
    except Exception as e:
        send_telegram(f"‚ùå –û—à–∏–±–∫–∞ run_once: {e}")
        await page.close()
        return None

# -------- –ö–æ–º–∞–Ω–¥—ã Telegram ---------
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if state["running"]:
        await update.message.reply_text("–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞.")
        return
    await update.message.reply_text("–ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–∞—Ç...")
    state["running"] = True

    async def checker_task():
        ensure_playwright_browsers()  # –°–∫–∞—á–∏–≤–∞–µ–º Chromium
        async with async_playwright() as p:
            state["browser_context"] = await p.chromium.launch(headless=HEADLESS, args=["--no-sandbox"])
            while state["running"]:
                try:
                    slot = await run_once(state["browser_context"])
                    if slot:
                        send_telegram(f"‚úÖ –ù–∞–π–¥–µ–Ω —Å–ª–æ—Ç: {slot.date_str} {slot.time_str}")
                    await asyncio.sleep(CHECK_INTERVAL_SEC)
                except Exception as e:
                    send_telegram(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞: {e}")
                    await asyncio.sleep(CHECK_INTERVAL_SEC)

    state["bg_task"] = asyncio.create_task(checker_task())

async def cmd_stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not state["running"]:
        await update.message.reply_text("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞.")
        return
    state["running"] = False
    await update.message.reply_text("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏...")
    send_telegram("üõë –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

# -------- Main ---------
async def main():
    if not TELEGRAM_TOKEN:
        print("TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω!")
        return
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("stop", cmd_stop))
    send_telegram("üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –æ–∂–∏–¥–∞–µ–º /start")
    await app.initialize()
    await app.start()
    await app.updater.start_polling()
    await asyncio.Event().wait()  # –¥–µ—Ä–∂–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∂–∏–≤—ã–º

if __name__ == "__main__":
    asyncio.run(main())

#!/usr/bin/env python3
"""
Wroc≈Çaw "Bez Kolejki" auto-booking bot (HTTP, Python).
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–π—Ç–∞ –±–µ–∑ –±—Ä–∞—É–∑–µ—Ä–∞. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ /start.
"""
import os
import asyncio
import requests
from bs4 import BeautifulSoup
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# -------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–µ–∑ ENV --------
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "")
CHAT_ID = os.getenv("CHAT_ID", "")
USER_EMAIL = os.getenv("USER_EMAIL", "")
USER_PESEL = os.getenv("USER_PESSEL", "")
OFFICE_TEXT = os.getenv("OFFICE_TEXT", "USC przy ul. W≈Çodkowica 20")
SERVICE_TEXT = os.getenv("SERVICE_TEXT", "UT: Wpis zagranicznego urodzenia/ma≈Ç≈ºe≈Ñstwa/zgonu")
CHECK_INTERVAL_SEC = int(os.getenv("CHECK_INTERVAL_SEC", 60))

state = {"running": False}

# -------- Telegram ---------
def send_telegram(text: str):
    print(text)
    if TELEGRAM_TOKEN and CHAT_ID:
        try:
            requests.post(
                f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage",
                data={"chat_id": CHAT_ID, "text": text},
                timeout=10,
            )
        except Exception as e:
            print("‚ùå Telegram error:", e)

# -------- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–π—Ç–∞ ---------
def check_site():
    url = "https://bez-kolejki.um.wroc.pl"
    send_telegram(f"üåê –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∞–π—Ç: {url}")
    try:
        resp = requests.get(url, timeout=15)
        if resp.status_code != 200:
            send_telegram(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∞–π—Ç—É: {resp.status_code}")
            return None

        soup = BeautifulSoup(resp.text, "html.parser")

        # –õ–æ–≥–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –æ—Ñ–∏—Å–æ–≤
        send_telegram("üìÑ –°–º–æ—Ç—Ä–∏–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ñ–∏—Å—ã –∏ —É—Å–ª—É–≥–∏...")
        offices = [el.text.strip() for el in soup.find_all("div") if OFFICE_TEXT in el.text]
        services = [el.text.strip() for el in soup.find_all("div") if SERVICE_TEXT in el.text]
        send_telegram(f"üè¢ –û—Ñ–∏—Å—ã: {offices}")
        send_telegram(f"üõé –£—Å–ª—É–≥–∏: {services}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç (–≥—Ä—É–±–æ, –∏—â–µ–º –∫–Ω–æ–ø–∫–∏ —Å —á–∏—Å–ª–∞–º–∏)
        dates = [btn.text.strip() for btn in soup.find_all("button") if btn.text.strip().isdigit()]
        send_telegram(f"üìÖ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –¥–∞—Ç—ã: {dates}")
        if not dates:
            return None

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ (–∏—â–µ–º –∫–Ω–æ–ø–∫–∏ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º HH:MM)
        times = []
        for btn in soup.find_all("button"):
            if ":" in btn.text and len(btn.text.strip()) == 5:
                times.append(btn.text.strip())
        send_telegram(f"‚è∞ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞: {times}")
        if not times:
            return None

        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        slot = {"date": dates[0], "time": times[0]}
        send_telegram(f"‚úÖ –°–ª–æ—Ç –Ω–∞–π–¥–µ–Ω: {slot['date']} {slot['time']}")
        return slot

    except Exception as e:
        send_telegram(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∞–π—Ç–∞: {e}")
        return None

# -------- –ö–æ–º–∞–Ω–¥—ã Telegram ---------
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if state["running"]:
        await update.message.reply_text("–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞.")
        return
    await update.message.reply_text("–ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–∞—Ç...")
    state["running"] = True

    async def loop_task():
        while state["running"]:
            check_site()
            await asyncio.sleep(CHECK_INTERVAL_SEC)

    asyncio.create_task(loop_task())

async def cmd_stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not state["running"]:
        await update.message.reply_text("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞.")
        return
    state["running"] = False
    await update.message.reply_text("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏...")
    send_telegram("üõë –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

# -------- Main ---------
async def main():
    if not TELEGRAM_TOKEN:
        print("TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω!")
        return
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("stop", cmd_stop))
    send_telegram("üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –æ–∂–∏–¥–∞–µ–º /start")
    await app.initialize()
    await app.start()
    await app.updater.start_polling()
    await asyncio.Event().wait()

if __name__ == "__main__":
    asyncio.run(main())
